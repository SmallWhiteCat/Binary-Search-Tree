class SearchTree:
    def __init__(self, val):
        self.val = val
        self.cnt = 1
        self.left = None
        self.right = None
        
class KthLargest:

    def __init__(self, k, nums):
        """
        :type k: int
        :type nums: List[int]
        """
        self.k = k
        #构造二叉搜索树
        self.root = None
        if nums:
            val = nums.pop(0)
            self.root = SearchTree(val)
            p = self.root
            # while nums:
                # val = nums.pop(0)
            for i in nums:
                val = i
                p = self.root
                p.cnt += 1
                while True:
                    if val > p.val:
                        if not p.right:
                            cur = SearchTree(val)
                            p.right = cur
                            break
                        else:
                            p = p.right
                            # p.cnt += 1
                    else:
                        if not p.left:
                            cur = SearchTree(val)
                            p.left = cur
                            break
                        else:
                            p = p.left    
                    p.cnt += 1
    def add(self, val):
        """
        :type val: int
        :rtype: int
        """  
        if not self.root:
            self.root = SearchTree(val)
            if self.k == 1:
                return val
        
        p = self.root
        p.cnt += 1
        while p:    #插入新元素
            if val > p.val:
                pr = p.right
                if not pr:
                    cur = SearchTree(val)
                    p.right = cur
                    break
                else:
                    p = pr
            else:
                pl = p.left
                if not pl:
                    cur = SearchTree(val)
                    p.left = cur
                    break
                else:
                    p = pl    
            p.cnt += 1                    
        p = self.root
        numk = self.k

        while p:    #计算第K大元素
            pr = p.right
            pl = p.left
            if pr:
                cur = pr
                resnumk = numk - cur.cnt - 1
                if resnumk == 0:
                    return p.val
                elif resnumk > 0:
                    numk = resnumk
                    p = pl
                else:
                    p = cur
            elif numk == 1:
                return p.val
            elif pl:
                p = pl
                numk -= 1
                    
                        
# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)
